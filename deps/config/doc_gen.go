// Code generated by github.com/filecoin-project/curio/deps/config/cfgdocgen. DO NOT EDIT.

package config

type DocField struct {
	Name    string
	Type    string
	Comment string
}

var Doc = map[string][]DocField{
	"ApisConfig": {
		{
			Name: "ChainApiInfo",
			Type: "[]string",

			Comment: `ChainApiInfo is the API endpoint for the Lotus daemon.`,
		},
		{
			Name: "StorageRPCSecret",
			Type: "string",

			Comment: `API auth secret for the Curio nodes to use. This value should only be set on the bade layer.`,
		},
	},
	"BatchFeeConfig": {
		{
			Name: "Base",
			Type: "types.FIL",

			Comment: `Accepts a decimal string (e.g., "123.45") with optional "fil" or "attofil" suffix.`,
		},
		{
			Name: "PerSector",
			Type: "types.FIL",

			Comment: `Accepts a decimal string (e.g., "123.45") with optional "fil" or "attofil" suffix.`,
		},
	},
	"CommitBatchingConfig": {
		{
			Name: "BaseFeeThreshold",
			Type: "types.FIL",

			Comment: `Base fee value below which we should try to send Commit messages immediately
Accepts a decimal string (e.g., "123.45" or "123 fil") with optional "fil" or "attofil" suffix. (Default: "0.005 FIL")`,
		},
		{
			Name: "Timeout",
			Type: "time.Duration",

			Comment: `Maximum amount of time any given sector in the batch can wait for the batch to accumulate
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "1h0m0s")`,
		},
		{
			Name: "Slack",
			Type: "time.Duration",

			Comment: `Time buffer for forceful batch submission before sectors/deals in batch would start expiring
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "1h0m0s")`,
		},
	},
	"CompressionConfig": {
		{
			Name: "GzipLevel",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "BrotliLevel",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "DeflateLevel",
			Type: "int",

			Comment: ``,
		},
	},
	"CurioAddresses": {
		{
			Name: "PreCommitControl",
			Type: "[]string",

			Comment: `PreCommitControl is an array of Addresses to send PreCommit messages from`,
		},
		{
			Name: "CommitControl",
			Type: "[]string",

			Comment: `CommitControl is an array of Addresses to send Commit messages from`,
		},
		{
			Name: "DealPublishControl",
			Type: "[]string",

			Comment: `DealPublishControl is an array of Address to send the deal collateral from with PublishStorageDeal Message`,
		},
		{
			Name: "TerminateControl",
			Type: "[]string",

			Comment: `TerminateControl is a list of addresses used to send Terminate messages.`,
		},
		{
			Name: "DisableOwnerFallback",
			Type: "bool",

			Comment: `DisableOwnerFallback disables usage of the owner address for messages
sent automatically`,
		},
		{
			Name: "DisableWorkerFallback",
			Type: "bool",

			Comment: `DisableWorkerFallback disables usage of the worker address for messages
sent automatically, if control addresses are configured.
A control address that doesn't have enough funds will still be chosen
over the worker address if this flag is set.`,
		},
		{
			Name: "MinerAddresses",
			Type: "[]string",

			Comment: `MinerAddresses are the addresses of the miner actors`,
		},
	},
	"CurioAlertingConfig": {
		{
			Name: "MinimumWalletBalance",
			Type: "types.FIL",

			Comment: `MinimumWalletBalance is the minimum balance all active wallets. If the balance is below this value, an
alerts will be triggered for the wallet
Accepts a decimal string (e.g., "123.45" or "123 fil") with optional "fil" or "attofil" suffix. (Default: "5 FIL")`,
		},
		{
			Name: "PagerDuty",
			Type: "PagerDutyConfig",

			Comment: `PagerDutyConfig is the configuration for the PagerDuty alerting integration.`,
		},
		{
			Name: "PrometheusAlertManager",
			Type: "PrometheusAlertManagerConfig",

			Comment: `PrometheusAlertManagerConfig is the configuration for the Prometheus AlertManager alerting integration.`,
		},
		{
			Name: "SlackWebhook",
			Type: "SlackWebhookConfig",

			Comment: `SlackWebhookConfig is a configuration type for Slack webhook integration.`,
		},
	},
	"CurioBatchingConfig": {
		{
			Name: "PreCommit",
			Type: "PreCommitBatchingConfig",

			Comment: `Precommit Batching configuration`,
		},
		{
			Name: "Commit",
			Type: "CommitBatchingConfig",

			Comment: `Commit batching configuration`,
		},
		{
			Name: "Update",
			Type: "UpdateBatchingConfig",

			Comment: `Snap Deals batching configuration`,
		},
	},
	"CurioConfig": {
		{
			Name: "Subsystems",
			Type: "CurioSubsystemsConfig",

			Comment: `Subsystems defines configuration settings for various subsystems within the Curio node.`,
		},
		{
			Name: "Fees",
			Type: "CurioFees",

			Comment: `Fees holds the fee-related configuration parameters for various operations in the Curio node.`,
		},
		{
			Name: "Addresses",
			Type: "[]CurioAddresses",

			Comment: `Addresses specifies the list of miner addresses and their related wallet addresses.`,
		},
		{
			Name: "Proving",
			Type: "CurioProvingConfig",

			Comment: `Proving defines the configuration settings related to proving functionality within the Curio node.`,
		},
		{
			Name: "HTTP",
			Type: "HTTPConfig",

			Comment: `HTTP represents the configuration for the HTTP server settings in the Curio node.`,
		},
		{
			Name: "Market",
			Type: "MarketConfig",

			Comment: `Market specifies configuration options for the Market subsystem within the Curio node.`,
		},
		{
			Name: "Ingest",
			Type: "CurioIngestConfig",

			Comment: `Ingest defines configuration parameters for handling and limiting deal ingestion pipelines within the Curio node.`,
		},
		{
			Name: "Seal",
			Type: "CurioSealConfig",

			Comment: `Seal defines the configuration related to the sealing process in Curio.`,
		},
		{
			Name: "Apis",
			Type: "ApisConfig",

			Comment: `Apis defines the configuration for API-related settings in the Curio system.`,
		},
		{
			Name: "Alerting",
			Type: "CurioAlertingConfig",

			Comment: `Alerting specifies configuration settings for alerting mechanisms, including thresholds and external integrations.`,
		},
		{
			Name: "Batching",
			Type: "CurioBatchingConfig",

			Comment: `Batching represents the batching configuration for pre-commit, commit, and update operations.`,
		},
	},
	"CurioFees": {
		{
			Name: "MaxPreCommitBatchGasFee",
			Type: "BatchFeeConfig",

			Comment: `maxBatchFee = maxBase + maxPerSector * nSectors
(Default: #Base = "0 FIL" and #PerSector = "0.02 FIL")`,
		},
		{
			Name: "MaxCommitBatchGasFee",
			Type: "BatchFeeConfig",

			Comment: `maxBatchFee = maxBase + maxPerSector * nSectors
(Default: #Base = "0 FIL" and #PerSector = "0.03 FIL")`,
		},
		{
			Name: "MaxUpdateBatchGasFee",
			Type: "BatchFeeConfig",

			Comment: `Accepts a decimal string (e.g., "123.45") with optional "fil" or "attofil" suffix.
(Default: #Base = "0 FIL" and #PerSector = "0.03 FIL")`,
		},
		{
			Name: "MaxWindowPoStGasFee",
			Type: "types.FIL",

			Comment: `WindowPoSt is a high-value operation, so the default fee should be high.
Accepts a decimal string (e.g., "123.45") with optional "fil" or "attofil" suffix. (Default: "5 fil")`,
		},
		{
			Name: "CollateralFromMinerBalance",
			Type: "bool",

			Comment: `Whether to use available miner balance for sector collateral instead of sending it with each message (Default: false)`,
		},
		{
			Name: "DisableCollateralFallback",
			Type: "bool",

			Comment: `Don't send collateral with messages even if there is no available balance in the miner actor (Default: false)`,
		},
	},
	"CurioIngestConfig": {
		{
			Name: "MaxMarketRunningPipelines",
			Type: "int",

			Comment: `MaxMarketRunningPipelines is the maximum number of market pipelines that can be actively running tasks.
A "running" pipeline is one that has at least one task currently assigned to a machine (owner_id is not null).
If this limit is exceeded, the system will apply backpressure to delay processing of new deals.
0 means unlimited. (Default: 64)`,
		},
		{
			Name: "MaxQueueDownload",
			Type: "int",

			Comment: `MaxQueueDownload is the maximum number of pipelines that can be queued at the downloading stage,
waiting for a machine to pick up their task (owner_id is null).
If this limit is exceeded, the system will apply backpressure to slow the ingestion of new deals.
0 means unlimited. (Default: 8)`,
		},
		{
			Name: "MaxQueueCommP",
			Type: "int",

			Comment: `MaxQueueCommP is the maximum number of pipelines that can be queued at the CommP (verify) stage,
waiting for a machine to pick up their verification task (owner_id is null).
If this limit is exceeded, the system will apply backpressure, delaying new deal processing.
0 means unlimited. (Default: 8)`,
		},
		{
			Name: "MaxQueueDealSector",
			Type: "int",

			Comment: `Maximum number of sectors that can be queued waiting for deals to start processing.
0 = unlimited
Note: This mechanism will delay taking deal data from markets, providing backpressure to the market subsystem.
The DealSector queue includes deals that are ready to enter the sealing pipeline but are not yet part of it.
DealSector queue is the first queue in the sealing pipeline, making it the primary backpressure mechanism. (Default: 8)`,
		},
		{
			Name: "MaxQueueSDR",
			Type: "int",

			Comment: `Maximum number of sectors that can be queued waiting for SDR to start processing.
0 = unlimited
Note: This mechanism will delay taking deal data from markets, providing backpressure to the market subsystem.
The SDR queue includes deals which are in the process of entering the sealing pipeline. In case of the SDR tasks it is
possible that this queue grows more than this limit(CC sectors), the backpressure is only applied to sectors
entering the pipeline.
Only applies to PoRep pipeline (DoSnap = false) (Default: 8)`,
		},
		{
			Name: "MaxQueueTrees",
			Type: "int",

			Comment: `Maximum number of sectors that can be queued waiting for SDRTrees to start processing.
0 = unlimited
Note: This mechanism will delay taking deal data from markets, providing backpressure to the market subsystem.
In case of the trees tasks it is possible that this queue grows more than this limit, the backpressure is only
applied to sectors entering the pipeline.
Only applies to PoRep pipeline (DoSnap = false) (Default: 0)`,
		},
		{
			Name: "MaxQueuePoRep",
			Type: "int",

			Comment: `Maximum number of sectors that can be queued waiting for PoRep to start processing.
0 = unlimited
Note: This mechanism will delay taking deal data from markets, providing backpressure to the market subsystem.
Like with the trees tasks, it is possible that this queue grows more than this limit, the backpressure is only
applied to sectors entering the pipeline.
Only applies to PoRep pipeline (DoSnap = false) (Default: 0)`,
		},
		{
			Name: "MaxQueueSnapEncode",
			Type: "int",

			Comment: `MaxQueueSnapEncode is the maximum number of sectors that can be queued waiting for UpdateEncode tasks to start.
0 means unlimited.
This applies backpressure to the market subsystem by delaying the ingestion of deal data.
Only applies to the Snap Deals pipeline (DoSnap = true). (Default: 16)`,
		},
		{
			Name: "MaxQueueSnapProve",
			Type: "int",

			Comment: `MaxQueueSnapProve is the maximum number of sectors that can be queued waiting for UpdateProve to start processing.
0 means unlimited.
This applies backpressure in the Snap Deals pipeline (DoSnap = true) by delaying new deal ingestion. (Default: 0)`,
		},
		{
			Name: "MaxDealWaitTime",
			Type: "time.Duration",

			Comment: `Maximum time an open deal sector should wait for more deals before it starts sealing.
This ensures that sectors don't remain open indefinitely, consuming resources.
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "1h0m0s")`,
		},
		{
			Name: "DoSnap",
			Type: "bool",

			Comment: `DoSnap, when set to true, enables snap deal processing for deals ingested by this instance.
Unlike lotus-miner, there is no fallback to PoRep when no snap sectors are available.
When enabled, all deals will be processed as snap deals. (Default: false)`,
		},
	},
	"CurioProvingConfig": {
		{
			Name: "ParallelCheckLimit",
			Type: "int",

			Comment: `Maximum number of sector checks to run in parallel. (0 = unlimited)

WARNING: Setting this value too high may make the node crash by running out of stack
WARNING: Setting this value too low may make sector challenge reading much slower, resulting in failed PoSt due
to late submission.

After changing this option, confirm that the new value works in your setup by invoking
'curio test wd task 0' (Default: 32)`,
		},
		{
			Name: "SingleCheckTimeout",
			Type: "time.Duration",

			Comment: `Maximum amount of time a proving pre-check can take for a sector. If the check times out the sector will be skipped

WARNING: Setting this value too low risks in sectors being skipped even though they are accessible, just reading the
test challenge took longer than this timeout
WARNING: Setting this value too high risks missing PoSt deadline in case IO operations related to this sector are
blocked (e.g. in case of disconnected NFS mount)
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "10m0s")`,
		},
		{
			Name: "PartitionCheckTimeout",
			Type: "time.Duration",

			Comment: `Maximum amount of time a proving pre-check can take for an entire partition. If the check times out, sectors in
the partition which didn't get checked on time will be skipped

WARNING: Setting this value too low risks in sectors being skipped even though they are accessible, just reading the
test challenge took longer than this timeout
WARNING: Setting this value too high risks missing PoSt deadline in case IO operations related to this partition are
blocked or slow. Time duration string (e.g., "1h2m3s") in TOML format.  (Default: "20m0s")`,
		},
	},
	"CurioSealConfig": {
		{
			Name: "BatchSealSectorSize",
			Type: "string",

			Comment: `BatchSealSectorSize Allows setting the sector size supported by the batch seal task.
Can be any value as long as it is "32GiB". (Default: "32GiB")`,
		},
		{
			Name: "BatchSealBatchSize",
			Type: "int",

			Comment: `Number of sectors in a seal batch. Depends on hardware and supraseal configuration. (Default: 32)`,
		},
		{
			Name: "BatchSealPipelines",
			Type: "int",

			Comment: `Number of parallel pipelines. Can be 1 or 2. Depends on available raw block storage (Default: 2)`,
		},
		{
			Name: "SingleHasherPerThread",
			Type: "bool",

			Comment: `SingleHasherPerThread is a compatibility flag for older CPUs. Zen3 and later supports two sectors per thread.
Set to false for older CPUs (Zen 2 and before). (Default: false)`,
		},
		{
			Name: "LayerNVMEDevices",
			Type: "[]string",

			Comment: `LayerNVMEDevices is a list of pcie device addresses that should be used for SDR layer storage.
The required storage is 11 * BatchSealBatchSize * BatchSealSectorSize * BatchSealPipelines
Total Read IOPS for optimal performance should be 10M+.
The devices MUST be NVMe devices, not used for anything else. Any data on the devices will be lost!

It's recommend to define these settings in a per-machine layer, as the devices are machine-specific.

Example: ["0000:01:00.0", "0000:01:00.1"]`,
		},
	},
	"CurioSubsystemsConfig": {
		{
			Name: "EnableWindowPost",
			Type: "bool",

			Comment: `EnableWindowPost enables window post to be executed on this curio instance. Each machine in the cluster
with WindowPoSt enabled will also participate in the window post scheduler. It is possible to have multiple
machines with WindowPoSt enabled which will provide redundancy, and in case of multiple partitions per deadline,
will allow for parallel processing of partitions.

It is possible to have instances handling both WindowPoSt and WinningPoSt, which can provide redundancy without
the need for additional machines. In setups like this it is generally recommended to run
partitionsPerDeadline+1 machines. (Default: false)`,
		},
		{
			Name: "WindowPostMaxTasks",
			Type: "int",

			Comment: `The maximum amount of WindowPostMaxTasks tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. We do not recommend setting this value and let system resources determine
the maximum tasks (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableWinningPost",
			Type: "bool",

			Comment: `EnableWinningPost enables winning post to be executed on this curio instance.
Each machine in the cluster with WinningPoSt enabled will also participate in the winning post scheduler.
It is possible to mix machines with WindowPoSt and WinningPoSt enabled, for details see the EnableWindowPost
documentation. (Default: false)`,
		},
		{
			Name: "WinningPostMaxTasks",
			Type: "int",

			Comment: `The maximum amount of WinningPostMaxTasks tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. We do not recommend setting this value and let system resources determine
the maximum tasks (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableParkPiece",
			Type: "bool",

			Comment: `EnableParkPiece enables the "piece parking" task to run on this node. This task is responsible for fetching
pieces from the network and storing them in the storage subsystem until sectors are sealed. This task is
only applicable when integrating with boost, and should be enabled on nodes which will hold deal data
from boost until sectors containing the related pieces have the TreeD/TreeR constructed.
Note that future Curio implementations will have a separate task type for fetching pieces from the internet. (Default: false)`,
		},
		{
			Name: "ParkPieceMaxTasks",
			Type: "int",

			Comment: `The maximum amount of ParkPieceMaxTasks tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableSealSDR",
			Type: "bool",

			Comment: `EnableSealSDR enables SDR tasks to run. SDR is the long sequential computation
creating 11 layer files in sector cache directory.

SDR is the first task in the sealing pipeline. It's inputs are just the hash of the
unsealed data (CommD), sector number, miner id, and the seal proof type.
It's outputs are the 11 layer files in the sector cache directory.

In lotus-miner this was run as part of PreCommit1. (Default: false)`,
		},
		{
			Name: "SealSDRMaxTasks",
			Type: "int",

			Comment: `The maximum amount of SDR tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. (Default: 0 - unlimited)`,
		},
		{
			Name: "SealSDRMinTasks",
			Type: "int",

			Comment: `The maximum amount of SDR tasks that need to be queued before the system will start accepting new tasks.
The main purpose of this setting is to allow for enough tasks to accumulate for batch sealing. When batch sealing
nodes are present in the cluster, this value should be set to batch_size+1 to allow for the batch sealing node to
fill up the batch.
This setting can also be used to give priority to other nodes in the cluster by setting this value to a higher
value on the nodes which should have less priority. (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableSealSDRTrees",
			Type: "bool",

			Comment: `EnableSealSDRTrees enables the SDR pipeline tree-building task to run.
This task handles encoding of unsealed data into last sdr layer and building
of TreeR, TreeC and TreeD.

This task runs after SDR
TreeD is first computed with optional input of unsealed data
TreeR is computed from replica, which is first computed as field
addition of the last SDR layer and the bottom layer of TreeD (which is the unsealed data)
TreeC is computed from the 11 SDR layers
The 3 trees will later be used to compute the PoRep proof.

In case of SyntheticPoRep challenges for PoRep will be pre-generated at this step, and trees and layers
will be dropped. SyntheticPoRep works by pre-generating a very large set of challenges (~30GiB on disk)
then using a small subset of them for the actual PoRep computation. This allows for significant scratch space
saving between PreCommit and PoRep generation at the expense of more computation (generating challenges in this step)

In lotus-miner this was run as part of PreCommit2 (TreeD was run in PreCommit1).
Note that nodes with SDRTrees enabled will also answer to Finalize tasks,
which just remove unneeded tree data after PoRep is computed. (Default: false)`,
		},
		{
			Name: "SealSDRTreesMaxTasks",
			Type: "int",

			Comment: `The maximum amount of SealSDRTrees tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. (Default: 0 - unlimited)`,
		},
		{
			Name: "FinalizeMaxTasks",
			Type: "int",

			Comment: `FinalizeMaxTasks is the maximum amount of finalize tasks that can run simultaneously.
The finalize task is enabled on all machines which also handle SDRTrees tasks. Finalize ALWAYS runs on whichever
machine holds sector cache files, as it removes unneeded tree data after PoRep is computed.
Finalize will run in parallel with the SubmitCommitMsg task. (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableSendPrecommitMsg",
			Type: "bool",

			Comment: `EnableSendPrecommitMsg enables the sending of precommit messages to the chain
from this curio instance.
This runs after SDRTrees and uses the output CommD / CommR (roots of TreeD / TreeR) for the message (Default: false)`,
		},
		{
			Name: "EnablePoRepProof",
			Type: "bool",

			Comment: `EnablePoRepProof enables the computation of the porep proof

This task runs after interactive-porep seed becomes available, which happens 150 epochs (75min) after the
precommit message lands on chain. This task should run on a machine with a GPU. Vanilla PoRep proofs are
requested from the machine which holds sector cache files which most likely is the machine which ran the SDRTrees
task.

In lotus-miner this was Commit1 / Commit2 (Default: false)`,
		},
		{
			Name: "PoRepProofMaxTasks",
			Type: "int",

			Comment: `The maximum amount of PoRepProof tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableSendCommitMsg",
			Type: "bool",

			Comment: `EnableSendCommitMsg enables the sending of commit messages to the chain
from this curio instance. (Default: false)`,
		},
		{
			Name: "RequireActivationSuccess",
			Type: "bool",

			Comment: `Whether to abort if any sector activation in a batch fails (newly sealed sectors, only with ProveCommitSectors3). (Default: true)`,
		},
		{
			Name: "RequireNotificationSuccess",
			Type: "bool",

			Comment: `Whether to abort if any sector activation in a batch fails (updating sectors, only with ProveReplicaUpdates3). (Default: true)`,
		},
		{
			Name: "EnableMoveStorage",
			Type: "bool",

			Comment: `EnableMoveStorage enables the move-into-long-term-storage task to run on this curio instance.
This tasks should only be enabled on nodes with long-term storage.

The MoveStorage task is the last task in the sealing pipeline. It moves the sealed sector data from the
SDRTrees machine into long-term storage. This task runs after the Finalize task. (Default: false)`,
		},
		{
			Name: "NoUnsealedDecode",
			Type: "bool",

			Comment: `NoUnsealedDecode disables the decoding sector data on this node. Normally data encoding is enabled by default on
storage nodes with the MoveStorage task enabled. Setting this option to true means that unsealed data for sectors
will not be stored on this node (Default: false)`,
		},
		{
			Name: "MoveStorageMaxTasks",
			Type: "int",

			Comment: `The maximum amount of MoveStorage tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. It is recommended that this value is set to a number which
uses all available network (or disk) bandwidth on the machine without causing bottlenecks. (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableUpdateEncode",
			Type: "bool",

			Comment: `EnableUpdateEncode enables the encoding step of the SnapDeal process on this curio instance.
This step involves encoding the data into the sector and computing updated TreeR (uses gpu). (Default: false)`,
		},
		{
			Name: "EnableUpdateProve",
			Type: "bool",

			Comment: `EnableUpdateProve enables the proving step of the SnapDeal process on this curio instance.
This step generates the snark proof for the updated sector. (Default: false)`,
		},
		{
			Name: "EnableUpdateSubmit",
			Type: "bool",

			Comment: `EnableUpdateSubmit enables the submission of SnapDeal proofs to the blockchain from this curio instance.
This step submits the generated proofs to the chain. (Default: false)`,
		},
		{
			Name: "UpdateEncodeMaxTasks",
			Type: "int",

			Comment: `UpdateEncodeMaxTasks sets the maximum number of concurrent SnapDeal encoding tasks that can run on this instance. (Default: 0 - unlimited)`,
		},
		{
			Name: "UpdateProveMaxTasks",
			Type: "int",

			Comment: `UpdateProveMaxTasks sets the maximum number of concurrent SnapDeal proving tasks that can run on this instance. (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableWebGui",
			Type: "bool",

			Comment: `EnableWebGui enables the web GUI on this curio instance. The UI has minimal local overhead, but it should
only need to be run on a single machine in the cluster. (Default: false)`,
		},
		{
			Name: "GuiAddress",
			Type: "string",

			Comment: `The address that should listen for Web GUI requests. It should be in form "x.x.x.x:1234" (Default: 0.0.0.0:4701)`,
		},
		{
			Name: "UseSyntheticPoRep",
			Type: "bool",

			Comment: `UseSyntheticPoRep enables the synthetic PoRep for all new sectors. When set to true, will reduce the amount of
cache data held on disk after the completion of TreeRC task to 11GiB. (Default: false)`,
		},
		{
			Name: "SyntheticPoRepMaxTasks",
			Type: "int",

			Comment: `The maximum amount of SyntheticPoRep tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. (Default: 0 - unlimited)`,
		},
		{
			Name: "EnableBatchSeal",
			Type: "bool",

			Comment: `EnableBatchSeal enabled SupraSeal batch sealing on the node.  (Default: false)`,
		},
		{
			Name: "EnableDealMarket",
			Type: "bool",

			Comment: `EnableDealMarket enabled the deal market on the node. This would also enable libp2p on the node, if configured. (Default: false)`,
		},
		{
			Name: "EnableCommP",
			Type: "bool",

			Comment: `EnableCommP enables the commP task on te node. CommP is calculated before sending PublishDealMessage for a Mk12 deal
Must have EnableDealMarket = True (Default: false)`,
		},
		{
			Name: "CommPMaxTasks",
			Type: "int",

			Comment: `The maximum amount of CommP tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. (Default: 0 - unlimited)`,
		},
		{
			Name: "IndexingMaxTasks",
			Type: "int",

			Comment: `The maximum amount of indexing and IPNI tasks that can run simultaneously. Note that the maximum number of tasks will
also be bounded by resources available on the machine. (Default: 8)`,
		},
	},
	"HTTPConfig": {
		{
			Name: "Enable",
			Type: "bool",

			Comment: `Enable the HTTP server on the node`,
		},
		{
			Name: "DomainName",
			Type: "string",

			Comment: `DomainName specifies the domain name that the server uses to serve HTTP requests. DomainName cannot be empty and cannot be
an IP address`,
		},
		{
			Name: "ListenAddress",
			Type: "string",

			Comment: `ListenAddress is the address that the server listens for HTTP requests. It should be in form "x.x.x.x:1234" (Default: 0.0.0.0:12310)`,
		},
		{
			Name: "DelegateTLS",
			Type: "bool",

			Comment: `DelegateTLS allows the server to delegate TLS to a reverse proxy. When enabled the listen address will serve
HTTP and the reverse proxy will handle TLS termination.`,
		},
		{
			Name: "ReadTimeout",
			Type: "time.Duration",

			Comment: `ReadTimeout is the maximum duration for reading the entire or next request, including body, from the client.
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "5m0s")`,
		},
		{
			Name: "IdleTimeout",
			Type: "time.Duration",

			Comment: `IdleTimeout is the maximum duration of an idle session. If set, idle connections are closed after this duration.
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "5m0s")`,
		},
		{
			Name: "ReadHeaderTimeout",
			Type: "time.Duration",

			Comment: `ReadHeaderTimeout is amount of time allowed to read request headers
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "5m0s")`,
		},
		{
			Name: "EnableCORS",
			Type: "bool",

			Comment: `EnableCORS indicates whether Cross-Origin Resource Sharing (CORS) is enabled or not.`,
		},
		{
			Name: "CompressionLevels",
			Type: "CompressionConfig",

			Comment: `CompressionLevels hold the compression level for various compression methods supported by the server`,
		},
	},
	"IPNIConfig": {
		{
			Name: "Disable",
			Type: "bool",

			Comment: `Disable set whether to disable indexing announcement to the network and expose endpoints that
allow indexer nodes to process announcements. Default: False`,
		},
		{
			Name: "ServiceURL",
			Type: "[]string",

			Comment: `The network indexer web UI URL for viewing published announcements
TODO: should we use this for checking published heads before publishing? Later commit`,
		},
		{
			Name: "DirectAnnounceURLs",
			Type: "[]string",

			Comment: `The list of URLs of indexing nodes to announce to. This is a list of hosts we talk to tell them about new
heads.`,
		},
	},
	"IndexingConfig": {
		{
			Name: "InsertBatchSize",
			Type: "int",

			Comment: `Number of records per insert batch`,
		},
		{
			Name: "InsertConcurrency",
			Type: "int",

			Comment: `Number of concurrent inserts to split AddIndex calls to`,
		},
	},
	"MK12Config": {
		{
			Name: "PublishMsgPeriod",
			Type: "time.Duration",

			Comment: `When a deal is ready to publish, the amount of time to wait for more
deals to be ready to publish before publishing them all as a batch
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "5m0s")`,
		},
		{
			Name: "MaxDealsPerPublishMsg",
			Type: "uint64",

			Comment: `The maximum number of deals to include in a single PublishStorageDeals
message (Default: 8)`,
		},
		{
			Name: "MaxPublishDealFee",
			Type: "types.FIL",

			Comment: `The maximum fee to pay per deal when sending the PublishStorageDeals message
Accepts a decimal string (e.g., "123.45" or "123 fil") with optional "fil" or "attofil" suffix. (Default: "0.5 FIL")`,
		},
		{
			Name: "ExpectedPoRepSealDuration",
			Type: "time.Duration",

			Comment: `ExpectedPoRepSealDuration is the expected time it would take to seal the deal sector
This will be used to fail the deals which cannot be sealed on time.
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "8h0m0s")`,
		},
		{
			Name: "ExpectedSnapSealDuration",
			Type: "time.Duration",

			Comment: `ExpectedSnapSealDuration is the expected time it would take to snap the deal sector
This will be used to fail the deals which cannot be sealed on time.
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "2h0m0s")`,
		},
		{
			Name: "SkipCommP",
			Type: "bool",

			Comment: `SkipCommP can be used to skip doing a commP check before PublishDealMessage is sent on chain
Warning: If this check is skipped and there is a commP mismatch, all deals in the
sector will need to be sent again (Default: false)`,
		},
		{
			Name: "DisabledMiners",
			Type: "[]string",

			Comment: `DisabledMiners is a list of miner addresses that should be excluded from online deal making protocols`,
		},
		{
			Name: "MaxConcurrentDealSizeGiB",
			Type: "int64",

			Comment: `MaxConcurrentDealSizeGiB is a sum of all size of all deals which are waiting to be added to a sector
When the cumulative size of all deals in process reaches this number, new deals will be rejected.
(Default: 0 = unlimited)`,
		},
		{
			Name: "DenyUnknownClients",
			Type: "bool",

			Comment: `DenyUnknownClients determines the default behaviour for the deal of clients which are not in allow/deny list
If True then all deals coming from unknown clients will be rejected. (Default: false)`,
		},
		{
			Name: "DenyOnlineDeals",
			Type: "bool",

			Comment: `DenyOnlineDeals determines if the storage provider will accept online deals (Default: false)`,
		},
		{
			Name: "DenyOfflineDeals",
			Type: "bool",

			Comment: `DenyOfflineDeals determines if the storage provider will accept offline deals (Default: false)`,
		},
		{
			Name: "CIDGravityTokens",
			Type: "[]string",

			Comment: `CIDGravityTokens is the list of authorization token to use for CIDGravity filters. These should be in format
"minerID1:Token1", "minerID2:Token2". If a token for a minerID within the cluster is not provided,
CIDGravity filters will not be applied to deals associated with that miner ID.`,
		},
		{
			Name: "DefaultCIDGravityAccept",
			Type: "bool",

			Comment: `DefaultCIDGravityAccept when set to true till accept deals when CIDGravity service is not available.
Default behaviors is to reject the deals (Default: false)`,
		},
	},
	"MarketConfig": {
		{
			Name: "StorageMarketConfig",
			Type: "StorageMarketConfig",

			Comment: `StorageMarketConfig houses all the deal related market configuration`,
		},
	},
	"PagerDutyConfig": {
		{
			Name: "Enable",
			Type: "bool",

			Comment: `Enable is a flag to enable or disable the PagerDuty integration.`,
		},
		{
			Name: "PagerDutyEventURL",
			Type: "string",

			Comment: `PagerDutyEventURL is URL for PagerDuty.com Events API v2 URL. Events sent to this API URL are ultimately
routed to a PagerDuty.com service and processed.
The default is sufficient for integration with the stock commercial PagerDuty.com company's service.`,
		},
		{
			Name: "PageDutyIntegrationKey",
			Type: "string",

			Comment: `PageDutyIntegrationKey is the integration key for a PagerDuty.com service. You can find this unique service
identifier in the integration page for the service.`,
		},
	},
	"PieceLocatorConfig": {
		{
			Name: "URL",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "Headers",
			Type: "http.Header",

			Comment: ``,
		},
	},
	"PreCommitBatchingConfig": {
		{
			Name: "BaseFeeThreshold",
			Type: "types.FIL",

			Comment: `Base fee value below which we should try to send Precommit messages immediately
Accepts a decimal string (e.g., "123.45" or "123 fil") with optional "fil" or "attofil" suffix. (Default: "0.005 FIL")`,
		},
		{
			Name: "Timeout",
			Type: "time.Duration",

			Comment: `Maximum amount of time any given sector in the batch can wait for the batch to accumulate
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "4h0m0s")`,
		},
		{
			Name: "Slack",
			Type: "time.Duration",

			Comment: `Time buffer for forceful batch submission before sectors/deal in batch would start expiring
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "6h0m0s")`,
		},
	},
	"PrometheusAlertManagerConfig": {
		{
			Name: "Enable",
			Type: "bool",

			Comment: `Enable is a flag to enable or disable the Prometheus AlertManager integration.`,
		},
		{
			Name: "AlertManagerURL",
			Type: "string",

			Comment: `AlertManagerURL is the URL for the Prometheus AlertManager API v2 URL.`,
		},
	},
	"SlackWebhookConfig": {
		{
			Name: "Enable",
			Type: "bool",

			Comment: `Enable is a flag to enable or disable the Prometheus AlertManager integration.`,
		},
		{
			Name: "WebHookURL",
			Type: "string",

			Comment: `WebHookURL is the URL for the URL for slack Webhook.
Example: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX`,
		},
	},
	"StorageMarketConfig": {
		{
			Name: "MK12",
			Type: "MK12Config",

			Comment: `MK12 encompasses all configuration related to deal protocol mk1.2.0 and mk1.2.1 (i.e. Boost deals)`,
		},
		{
			Name: "IPNI",
			Type: "IPNIConfig",

			Comment: `IPNI configuration for ipni-provider`,
		},
		{
			Name: "Indexing",
			Type: "IndexingConfig",

			Comment: `Indexing configuration for deal indexing`,
		},
		{
			Name: "PieceLocator",
			Type: "[]PieceLocatorConfig",

			Comment: `PieceLocator is a list of HTTP url and headers combination to query for a piece for offline deals
User can run a remote file server which can host all the pieces over the HTTP and supply a reader when requested.
The server must support "HEAD" request and "GET" request.
1. <URL>?id=pieceCID with "HEAD" request responds with 200 if found or 404 if not. Must send header "Content-Length" with file size as value
2. <URL>?id=pieceCID must provide a reader for the requested piece along with header "Content-Length" with file size as value`,
		},
	},
	"UpdateBatchingConfig": {
		{
			Name: "BaseFeeThreshold",
			Type: "types.FIL",

			Comment: `Base fee value below which we should try to send Commit messages immediately
Accepts a decimal string (e.g., "123.45" or "123 fil") with optional "fil" or "attofil" suffix. (Default: "0.005 FIL")`,
		},
		{
			Name: "Timeout",
			Type: "time.Duration",

			Comment: `Maximum amount of time any given sector in the batch can wait for the batch to accumulate
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "1h0m0s")`,
		},
		{
			Name: "Slack",
			Type: "time.Duration",

			Comment: `Time buffer for forceful batch submission before sectors/deals in batch would start expiring
Time duration string (e.g., "1h2m3s") in TOML format. (Default: "1h0m0s")`,
		},
	},
}
