// Code generated by github.com/filecoin-project/curio/gen/api. DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"
	"reflect"

	"golang.org/x/xerrors"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"

	lapi "github.com/filecoin-project/lotus/api"
	lpiece "github.com/filecoin-project/lotus/storage/pipeline/piece"
	"github.com/filecoin-project/lotus/storage/sealer/fsutil"
	"github.com/filecoin-project/lotus/storage/sealer/storiface"
)

var _ = reflect.TypeOf([]byte(nil))
var ErrNotSupported = xerrors.New("method not supported")

type CurioStruct struct {
	Internal CurioMethods
}

type CurioMethods struct {
	AllocatePieceToSector func(p0 context.Context, p1 address.Address, p2 lpiece.PieceDealInfo, p3 int64, p4 url.URL, p5 http.Header) (lapi.SectorOffset, error) `perm:"write"`

	LogList func(p0 context.Context) ([]string, error) `perm:"read"`

	LogSetLevel func(p0 context.Context, p1 string, p2 string) error `perm:"admin"`

	Shutdown func(p0 context.Context) error `perm:"admin"`

	StorageAddLocal func(p0 context.Context, p1 string) error `perm:"admin"`

	StorageDetachLocal func(p0 context.Context, p1 string) error `perm:"admin"`

	StorageFindSector func(p0 context.Context, p1 abi.SectorID, p2 storiface.SectorFileType, p3 abi.SectorSize, p4 bool) ([]storiface.SectorStorageInfo, error) `perm:"admin"`

	StorageInfo func(p0 context.Context, p1 storiface.ID) (storiface.StorageInfo, error) `perm:"admin"`

	StorageInit func(p0 context.Context, p1 string, p2 storiface.LocalStorageMeta) error `perm:"admin"`

	StorageList func(p0 context.Context) (map[storiface.ID][]storiface.Decl, error) `perm:"admin"`

	StorageLocal func(p0 context.Context) (map[storiface.ID]string, error) `perm:"admin"`

	StorageStat func(p0 context.Context, p1 storiface.ID) (fsutil.FsStat, error) `perm:"admin"`

	Version func(p0 context.Context) (lapi.Version, error) `perm:"admin"`
}

type CurioStub struct {
}

func (s *CurioStruct) AllocatePieceToSector(p0 context.Context, p1 address.Address, p2 lpiece.PieceDealInfo, p3 int64, p4 url.URL, p5 http.Header) (lapi.SectorOffset, error) {
	if s.Internal.AllocatePieceToSector == nil {
		return *new(lapi.SectorOffset), ErrNotSupported
	}
	return s.Internal.AllocatePieceToSector(p0, p1, p2, p3, p4, p5)
}

func (s *CurioStub) AllocatePieceToSector(p0 context.Context, p1 address.Address, p2 lpiece.PieceDealInfo, p3 int64, p4 url.URL, p5 http.Header) (lapi.SectorOffset, error) {
	return *new(lapi.SectorOffset), ErrNotSupported
}

func (s *CurioStruct) LogList(p0 context.Context) ([]string, error) {
	if s.Internal.LogList == nil {
		return *new([]string), ErrNotSupported
	}
	return s.Internal.LogList(p0)
}

func (s *CurioStub) LogList(p0 context.Context) ([]string, error) {
	return *new([]string), ErrNotSupported
}

func (s *CurioStruct) LogSetLevel(p0 context.Context, p1 string, p2 string) error {
	if s.Internal.LogSetLevel == nil {
		return ErrNotSupported
	}
	return s.Internal.LogSetLevel(p0, p1, p2)
}

func (s *CurioStub) LogSetLevel(p0 context.Context, p1 string, p2 string) error {
	return ErrNotSupported
}

func (s *CurioStruct) Shutdown(p0 context.Context) error {
	if s.Internal.Shutdown == nil {
		return ErrNotSupported
	}
	return s.Internal.Shutdown(p0)
}

func (s *CurioStub) Shutdown(p0 context.Context) error {
	return ErrNotSupported
}

func (s *CurioStruct) StorageAddLocal(p0 context.Context, p1 string) error {
	if s.Internal.StorageAddLocal == nil {
		return ErrNotSupported
	}
	return s.Internal.StorageAddLocal(p0, p1)
}

func (s *CurioStub) StorageAddLocal(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *CurioStruct) StorageDetachLocal(p0 context.Context, p1 string) error {
	if s.Internal.StorageDetachLocal == nil {
		return ErrNotSupported
	}
	return s.Internal.StorageDetachLocal(p0, p1)
}

func (s *CurioStub) StorageDetachLocal(p0 context.Context, p1 string) error {
	return ErrNotSupported
}

func (s *CurioStruct) StorageFindSector(p0 context.Context, p1 abi.SectorID, p2 storiface.SectorFileType, p3 abi.SectorSize, p4 bool) ([]storiface.SectorStorageInfo, error) {
	if s.Internal.StorageFindSector == nil {
		return *new([]storiface.SectorStorageInfo), ErrNotSupported
	}
	return s.Internal.StorageFindSector(p0, p1, p2, p3, p4)
}

func (s *CurioStub) StorageFindSector(p0 context.Context, p1 abi.SectorID, p2 storiface.SectorFileType, p3 abi.SectorSize, p4 bool) ([]storiface.SectorStorageInfo, error) {
	return *new([]storiface.SectorStorageInfo), ErrNotSupported
}

func (s *CurioStruct) StorageInfo(p0 context.Context, p1 storiface.ID) (storiface.StorageInfo, error) {
	if s.Internal.StorageInfo == nil {
		return *new(storiface.StorageInfo), ErrNotSupported
	}
	return s.Internal.StorageInfo(p0, p1)
}

func (s *CurioStub) StorageInfo(p0 context.Context, p1 storiface.ID) (storiface.StorageInfo, error) {
	return *new(storiface.StorageInfo), ErrNotSupported
}

func (s *CurioStruct) StorageInit(p0 context.Context, p1 string, p2 storiface.LocalStorageMeta) error {
	if s.Internal.StorageInit == nil {
		return ErrNotSupported
	}
	return s.Internal.StorageInit(p0, p1, p2)
}

func (s *CurioStub) StorageInit(p0 context.Context, p1 string, p2 storiface.LocalStorageMeta) error {
	return ErrNotSupported
}

func (s *CurioStruct) StorageList(p0 context.Context) (map[storiface.ID][]storiface.Decl, error) {
	if s.Internal.StorageList == nil {
		return *new(map[storiface.ID][]storiface.Decl), ErrNotSupported
	}
	return s.Internal.StorageList(p0)
}

func (s *CurioStub) StorageList(p0 context.Context) (map[storiface.ID][]storiface.Decl, error) {
	return *new(map[storiface.ID][]storiface.Decl), ErrNotSupported
}

func (s *CurioStruct) StorageLocal(p0 context.Context) (map[storiface.ID]string, error) {
	if s.Internal.StorageLocal == nil {
		return *new(map[storiface.ID]string), ErrNotSupported
	}
	return s.Internal.StorageLocal(p0)
}

func (s *CurioStub) StorageLocal(p0 context.Context) (map[storiface.ID]string, error) {
	return *new(map[storiface.ID]string), ErrNotSupported
}

func (s *CurioStruct) StorageStat(p0 context.Context, p1 storiface.ID) (fsutil.FsStat, error) {
	if s.Internal.StorageStat == nil {
		return *new(fsutil.FsStat), ErrNotSupported
	}
	return s.Internal.StorageStat(p0, p1)
}

func (s *CurioStub) StorageStat(p0 context.Context, p1 storiface.ID) (fsutil.FsStat, error) {
	return *new(fsutil.FsStat), ErrNotSupported
}

func (s *CurioStruct) Version(p0 context.Context) (lapi.Version, error) {
	if s.Internal.Version == nil {
		return *new(lapi.Version), ErrNotSupported
	}
	return s.Internal.Version(p0)
}

func (s *CurioStub) Version(p0 context.Context) (lapi.Version, error) {
	return *new(lapi.Version), ErrNotSupported
}

var _ Curio = new(CurioStruct)
