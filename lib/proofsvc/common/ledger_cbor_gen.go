// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package common

import (
	"fmt"
	"io"
	"math"
	"sort"

	genadt "github.com/filecoin-project/curio/lib/genadt"
	address "github.com/filecoin-project/go-address"
	crypto "github.com/filecoin-project/go-state-types/crypto"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *BlockHeader) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{172}); err != nil {
		return err
	}

	// t.Client (address.Address) (struct)
	if len("Client") > 8192 {
		return xerrors.Errorf("Value in field \"Client\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Client"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Client")); err != nil {
		return err
	}

	if err := t.Client.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Height (uint64) (uint64)
	if len("Height") > 8192 {
		return xerrors.Errorf("Value in field \"Height\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Height"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Height")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Height)); err != nil {
		return err
	}

	// t.L1Base (types.TipSetKey) (struct)
	if len("L1Base") > 8192 {
		return xerrors.Errorf("Value in field \"L1Base\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("L1Base"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("L1Base")); err != nil {
		return err
	}

	if err := t.L1Base.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.OpType (common.OpType) (uint64)
	if len("OpType") > 8192 {
		return xerrors.Errorf("Value in field \"OpType\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OpType"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("OpType")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OpType)); err != nil {
		return err
	}

	// t.Parent (genadt.CborLink[*github.com/filecoin-project/curio/lib/proofsvc/common.BlockHeader]) (struct)
	if len("Parent") > 8192 {
		return xerrors.Errorf("Value in field \"Parent\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Parent"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Parent")); err != nil {
		return err
	}

	if err := t.Parent.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Version (uint64) (uint64)
	if len("Version") > 8192 {
		return xerrors.Errorf("Value in field \"Version\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Version"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Version")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Version)); err != nil {
		return err
	}

	// t.Metadata (string) (string)
	if len("Metadata") > 8192 {
		return xerrors.Errorf("Value in field \"Metadata\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Metadata"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Metadata")); err != nil {
		return err
	}

	if len(t.Metadata) > 8192 {
		return xerrors.Errorf("Value in field t.Metadata was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Metadata))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Metadata)); err != nil {
		return err
	}

	// t.Provider (address.Address) (struct)
	if len("Provider") > 8192 {
		return xerrors.Errorf("Value in field \"Provider\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Provider"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Provider")); err != nil {
		return err
	}

	if err := t.Provider.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Signature (crypto.Signature) (struct)
	if len("Signature") > 8192 {
		return xerrors.Errorf("Value in field \"Signature\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Signature"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Signature")); err != nil {
		return err
	}

	if err := t.Signature.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Validator (address.Address) (struct)
	if len("Validator") > 8192 {
		return xerrors.Errorf("Value in field \"Validator\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Validator"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Validator")); err != nil {
		return err
	}

	if err := t.Validator.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.PaymentNonce (uint64) (uint64)
	if len("PaymentNonce") > 8192 {
		return xerrors.Errorf("Value in field \"PaymentNonce\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("PaymentNonce"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("PaymentNonce")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.PaymentNonce)); err != nil {
		return err
	}

	// t.PaymentCumulative (big.Int) (struct)
	if len("PaymentCumulative") > 8192 {
		return xerrors.Errorf("Value in field \"PaymentCumulative\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("PaymentCumulative"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("PaymentCumulative")); err != nil {
		return err
	}

	if err := t.PaymentCumulative.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *BlockHeader) UnmarshalCBOR(r io.Reader) (err error) {
	*t = BlockHeader{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("BlockHeader: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 17)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Client (address.Address) (struct)
		case "Client":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Client = new(address.Address)
					if err := t.Client.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Client pointer: %w", err)
					}
				}

			}
			// t.Height (uint64) (uint64)
		case "Height":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Height = uint64(extra)

			}
			// t.L1Base (types.TipSetKey) (struct)
		case "L1Base":

			{

				if err := t.L1Base.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.L1Base: %w", err)
				}

			}
			// t.OpType (common.OpType) (uint64)
		case "OpType":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OpType = OpType(extra)

			}
			// t.Parent (genadt.CborLink[*github.com/filecoin-project/curio/lib/proofsvc/common.BlockHeader]) (struct)
		case "Parent":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Parent = new(genadt.CborLink[*BlockHeader])
					if err := t.Parent.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Parent pointer: %w", err)
					}
				}

			}
			// t.Version (uint64) (uint64)
		case "Version":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Version = uint64(extra)

			}
			// t.Metadata (string) (string)
		case "Metadata":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Metadata = string(sval)
			}
			// t.Provider (address.Address) (struct)
		case "Provider":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Provider = new(address.Address)
					if err := t.Provider.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Provider pointer: %w", err)
					}
				}

			}
			// t.Signature (crypto.Signature) (struct)
		case "Signature":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Signature = new(crypto.Signature)
					if err := t.Signature.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Signature pointer: %w", err)
					}
				}

			}
			// t.Validator (address.Address) (struct)
		case "Validator":

			{

				if err := t.Validator.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Validator: %w", err)
				}

			}
			// t.PaymentNonce (uint64) (uint64)
		case "PaymentNonce":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.PaymentNonce = uint64(extra)

			}
			// t.PaymentCumulative (big.Int) (struct)
		case "PaymentCumulative":

			{

				if err := t.PaymentCumulative.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.PaymentCumulative: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
