definitions:
  address.Address:
    type: object
  github_com_filecoin-project_go-state-types_builtin_v16_verifreg.AllocationId:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - NoAllocationID
  http.Header:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  mk20.AggregateType:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - AggregateTypeNone
    - AggregateTypeV1
  mk20.DDOV1:
    properties:
      allocation_id:
        allOf:
        - $ref: '#/definitions/github_com_filecoin-project_go-state-types_builtin_v16_verifreg.AllocationId'
        description: AllocationId represents an allocation identifier for the deal.
      contract_address:
        description: ContractAddress specifies the address of the contract governing
          the deal
        type: string
      contract_verify_method:
        description: ContractDealIDMethod specifies the method name to verify the
          deal and retrieve the deal ID for a contract
        type: string
      contract_verify_method_Params:
        description: ContractDealIDMethodParams represents encoded parameters for
          the contract verify method if required by the contract
        items:
          type: integer
        type: array
      duration:
        description: |-
          Duration represents the deal duration in epochs. This value is ignored for the deal with allocationID.
          It must be at least 518400
        type: integer
      notification_address:
        description: NotificationAddress specifies the address to which notifications
          will be relayed to when sector is activated
        type: string
      notification_payload:
        description: NotificationPayload holds the notification data typically in
          a serialized byte array format.
        items:
          type: integer
        type: array
      piece_manager:
        allOf:
        - $ref: '#/definitions/address.Address'
        description: Actor providing AuthorizeMessage (like f1/f3 wallet) able to
          authorize actions such as managing ACLs
      provider:
        allOf:
        - $ref: '#/definitions/address.Address'
        description: Provider specifies the address of the provider
    type: object
  mk20.DataSource:
    properties:
      format:
        allOf:
        - $ref: '#/definitions/mk20.PieceDataFormat'
        description: Format defines the format of the piece data, which can include
          CAR, Aggregate, or Raw formats.
      piece_cid:
        additionalProperties:
          type: string
        description: PieceCID represents the unique identifier (pieceCID V2) for a
          piece of data, stored as a CID object.
        example:
          /: bafkzcibfxx3meais3xzh6qn56y6hiasmrufhegoweu3o5ccofs74nfdfr4yn76pqz4pq
        type: object
      source_aggregate:
        allOf:
        - $ref: '#/definitions/mk20.DataSourceAggregate'
        description: SourceAggregate represents an aggregated source, comprising multiple
          data sources as pieces.
      source_http:
        allOf:
        - $ref: '#/definitions/mk20.DataSourceHTTP'
        description: SourceHTTP represents the HTTP-based source of piece data within
          a deal, including raw size and URLs for retrieval.
      source_http_put:
        allOf:
        - $ref: '#/definitions/mk20.DataSourceHttpPut'
        description: SourceHttpPut allow clients to push piece data after deal is
          accepted
      source_offline:
        allOf:
        - $ref: '#/definitions/mk20.DataSourceOffline'
        description: SourceOffline defines the data source for offline pieces, including
          raw size information.
    type: object
  mk20.DataSourceAggregate:
    properties:
      pieces:
        items:
          $ref: '#/definitions/mk20.DataSource'
        type: array
    type: object
  mk20.DataSourceHTTP:
    properties:
      urls:
        description: URLs lists the HTTP endpoints where the piece data can be fetched.
        items:
          $ref: '#/definitions/mk20.HttpUrl'
        type: array
    type: object
  mk20.DataSourceHttpPut:
    type: object
  mk20.DataSourceOffline:
    type: object
  mk20.Deal:
    properties:
      client:
        description: Client wallet string for the deal
        type: string
      data:
        allOf:
        - $ref: '#/definitions/mk20.DataSource'
        description: Data represents the source of piece data and associated metadata.
      identifier:
        description: Identifier represents a unique identifier for the deal in ULID
          format.
        example: 01ARZ3NDEKTSV4RRFFQ69G5FAV
        format: ulid
        type: string
      products:
        allOf:
        - $ref: '#/definitions/mk20.Products'
        description: Products represents a collection of product-specific information
          associated with a deal
    type: object
  mk20.DealCode:
    enum:
    - 200
    - 401
    - 400
    - 404
    - 430
    - 422
    - 423
    - 424
    - 425
    - 426
    - 500
    - 503
    - 429
    - 440
    - 441
    type: integer
    x-enum-varnames:
    - Ok
    - ErrUnAuthorized
    - ErrBadProposal
    - ErrDealNotFound
    - ErrMalformedDataSource
    - ErrUnsupportedDataSource
    - ErrUnsupportedProduct
    - ErrProductNotEnabled
    - ErrProductValidationFailed
    - ErrDealRejectedByMarket
    - ErrServerInternalError
    - ErrServiceMaintenance
    - ErrServiceOverloaded
    - ErrMarketNotEnabled
    - ErrDurationTooShort
  mk20.DealProductStatusResponse:
    properties:
      ddo_v1:
        allOf:
        - $ref: '#/definitions/mk20.DealStatusResponse'
        description: DDOV1 holds the DealStatusResponse for product "ddo_v1".
      pdp_v1:
        allOf:
        - $ref: '#/definitions/mk20.DealStatusResponse'
        description: PDPV1 represents the DealStatusResponse for the product pdp_v1.
    type: object
  mk20.DealState:
    enum:
    - accepted
    - uploading
    - processing
    - sealing
    - indexing
    - failed
    - complete
    type: string
    x-enum-varnames:
    - DealStateAccepted
    - DealStateAwaitingUpload
    - DealStateProcessing
    - DealStateSealing
    - DealStateIndexing
    - DealStateFailed
    - DealStateComplete
  mk20.DealStatusResponse:
    properties:
      errorMsg:
        description: ErrorMsg is an optional field containing error details associated
          with the deal's current state if an error occurred.
        type: string
      status:
        allOf:
        - $ref: '#/definitions/mk20.DealState'
        description: State indicates the current processing state of the deal as a
          DealState value.
    type: object
  mk20.FormatAggregate:
    properties:
      sub:
        description: |-
          Sub holds a slice of DataSource, representing details of sub pieces aggregated under this format.
          The order must be same as segment index to avoid incorrect indexing of sub pieces in an aggregate
        items:
          $ref: '#/definitions/mk20.DataSource'
        type: array
      type:
        allOf:
        - $ref: '#/definitions/mk20.AggregateType'
        description: Type specifies the type of aggregation for data pieces, represented
          by an AggregateType value.
    type: object
  mk20.FormatBytes:
    type: object
  mk20.FormatCar:
    type: object
  mk20.HttpUrl:
    properties:
      fallback:
        description: Fallback indicates whether this URL serves as a fallback option
          when other URLs fail.
        type: boolean
      headers:
        allOf:
        - $ref: '#/definitions/http.Header'
        description: HTTPHeaders represents the HTTP headers associated with the URL.
      priority:
        description: Priority indicates the order preference for using the URL in
          requests, with lower values having higher priority.
        type: integer
      url:
        description: URL specifies the HTTP endpoint where the piece data can be fetched.
        type: string
    type: object
  mk20.PDPV1:
    properties:
      add_piece:
        description: AddPiece indicated that this deal is meant to add Piece to a
          given DataSet. DataSetID must be defined.
        type: boolean
      create_data_set:
        description: CreateDataSet indicated that this deal is meant to create a new
          DataSet for the client by storage provider.
        type: boolean
      data_set_id:
        description: DataSetID is PDP verified contract dataset ID. It must be defined
          for all deals except when CreateDataSet is true.
        type: integer
      delete_data_set:
        description: |-
          DeleteDataSet indicated that this deal is meant to delete an existing DataSet created by SP for the client.
          DataSetID must be defined.
        type: boolean
      delete_piece:
        description: DeletePiece indicates whether the Piece of the data should be
          deleted. DataSetID must be defined.
        type: boolean
      extra_data:
        description: ExtraData can be used to send additional information to service
          contract when Verifier action like AddPiece, DeletePiece, etc. are performed.
        items:
          type: integer
        type: array
      piece_ids:
        description: PieceIDs is a list of Piece ids in a proof set.
        items:
          type: integer
        type: array
      record_keeper:
        description: RecordKeeper specifies the record keeper contract address for
          the new PDP dataset.
        type: string
    type: object
  mk20.PieceDataFormat:
    properties:
      aggregate:
        allOf:
        - $ref: '#/definitions/mk20.FormatAggregate'
        description: Aggregate holds a reference to the aggregated format of piece
          data.
      car:
        allOf:
        - $ref: '#/definitions/mk20.FormatCar'
        description: Car represents the optional CAR file format.
      raw:
        allOf:
        - $ref: '#/definitions/mk20.FormatBytes'
        description: Raw represents the raw format of the piece data, encapsulated
          as bytes.
    type: object
  mk20.Products:
    properties:
      ddo_v1:
        allOf:
        - $ref: '#/definitions/mk20.DDOV1'
        description: DDOV1 represents a product v1 configuration for Direct Data Onboarding
          (DDO)
      pdp_v1:
        allOf:
        - $ref: '#/definitions/mk20.PDPV1'
        description: PDPV1 represents product-specific configuration for PDP version
          1 deals.
      retrieval_v1:
        allOf:
        - $ref: '#/definitions/mk20.RetrievalV1'
        description: RetrievalV1 represents configuration for retrieval settings in
          the system, including indexing and announcement flags.
    type: object
  mk20.RetrievalV1:
    properties:
      announce_payload:
        description: AnnouncePayload indicates whether the payload should be announced
          to IPNI.
        type: boolean
      announce_piece:
        description: AnnouncePiece indicates whether the piece information should
          be announced to IPNI.
        type: boolean
      indexing:
        description: Indexing indicates if the deal is to be indexed in the provider's
          system to support CIDs based retrieval
        type: boolean
    type: object
  mk20.StartUpload:
    properties:
      chunk_size:
        description: ChunkSize defines the size of each data chunk to be used during
          the upload process.
        type: integer
      raw_size:
        description: RawSize indicates the total size of the data to be uploaded in
          bytes.
        type: integer
    type: object
  mk20.SupportedContracts:
    properties:
      contracts:
        description: Contracts represents a list of supported contract addresses in
          string format.
        items:
          type: string
        type: array
    type: object
  mk20.SupportedDataSources:
    properties:
      sources:
        description: Contracts represents a list of supported contract addresses in
          string format.
        items:
          type: string
        type: array
    type: object
  mk20.SupportedProducts:
    properties:
      products:
        description: Contracts represents a list of supported contract addresses in
          string format.
        items:
          type: string
        type: array
    type: object
  mk20.UploadCode:
    enum:
    - 200
    - 400
    - 404
    - 409
    - 500
    - 429
    type: integer
    x-enum-varnames:
    - UploadOk
    - UploadBadRequest
    - UploadNotFound
    - UploadChunkAlreadyUploaded
    - UploadServerError
    - UploadRateLimit
  mk20.UploadStartCode:
    enum:
    - 200
    - 400
    - 404
    - 409
    - 500
    type: integer
    x-enum-varnames:
    - UploadStartCodeOk
    - UploadStartCodeBadRequest
    - UploadStartCodeDealNotFound
    - UploadStartCodeAlreadyStarted
    - UploadStartCodeServerError
  mk20.UploadStatus:
    properties:
      missing:
        description: Missing represents the number of chunks that are not yet uploaded.
        type: integer
      missing_chunks:
        description: MissingChunks is a slice containing the indices of missing chunks.
        items:
          type: integer
        type: array
      total_chunks:
        description: TotalChunks represents the total number of chunks required for
          the upload.
        type: integer
      uploaded:
        description: Uploaded represents the number of chunks successfully uploaded.
        type: integer
      uploaded_chunks:
        description: UploadedChunks is a slice containing the indices of successfully
          uploaded chunks.
        items:
          type: integer
        type: array
    type: object
  mk20.UploadStatusCode:
    enum:
    - 200
    - 404
    - 425
    - 500
    type: integer
    x-enum-varnames:
    - UploadStatusCodeOk
    - UploadStatusCodeDealNotFound
    - UploadStatusCodeUploadNotStarted
    - UploadStatusCodeServerError
info:
  contact: {}
  description: Curio market APIs
  title: Curio Market 2.0 API
paths:
  /contracts:
    get:
      description: List of supported DDO contracts
      responses:
        "200":
          description: Array of contract addresses supported by a system or application.
          schema:
            $ref: '#/definitions/mk20.SupportedContracts'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List of supported DDO contracts
  /info/:
    get:
      description: '- OpenAPI spec UI for the Market 2.0 APIs'
      responses: {}
      summary: OpenAPI Spec UI
  /info/swagger.json:
    get:
      description: '- OpenAPI spec for the Market 2.0 APIs in JSON format'
      responses: {}
      summary: OpenAPI Spec JSON
  /info/swagger.yaml:
    get:
      description: '- OpenAPI spec for the Market 2.0 APIs in YAML format'
      responses: {}
      summary: OpenAPI Spec YAML
  /products:
    get:
      description: List of supported products
      responses:
        "200":
          description: Array of products supported by the SP
          schema:
            $ref: '#/definitions/mk20.SupportedProducts'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List of supported products
  /sources:
    get:
      description: List of supported data sources
      responses:
        "200":
          description: Array of dats sources supported by the SP
          schema:
            $ref: '#/definitions/mk20.SupportedDataSources'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List of supported data sources
  /status/{id}:
    get:
      description: Current status of MK20 deal per product
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: the status response for deal products with their respective
            deal statuses
          schema:
            $ref: '#/definitions/mk20.DealProductStatusResponse'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - CurioAuth: []
      summary: Status of the MK20 deal
  /store:
    post:
      consumes:
      - application/json
      description: Make a mk20 deal
      parameters:
      - description: mk20.Deal in json format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/mk20.Deal'
      responses:
        "200":
          description: Ok represents a successful operation with an HTTP status code
            of 200
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: ErrDealNotFound indicates that the specified deal could not
            be found, corresponding to the HTTP status code 404
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "422":
          description: ErrUnsupportedDataSource indicates the specified data source
            is not supported or disabled for use in the current context
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "423":
          description: ErrUnsupportedProduct indicates that the requested product
            is not supported by the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "424":
          description: ErrProductNotEnabled indicates that the requested product is
            not enabled on the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "425":
          description: ErrProductValidationFailed indicates a failure during product-specific
            validation due to invalid or missing data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "426":
          description: ErrDealRejectedByMarket indicates that a proposed deal was
            rejected by the market for not meeting its acceptance criteria or rules
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "429":
          description: ErrServiceOverloaded indicates that the service is overloaded
            and cannot process the request at the moment
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "430":
          description: ErrMalformedDataSource indicates that the provided data source
            is incorrectly formatted or contains invalid data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "440":
          description: ErrMarketNotEnabled indicates that the market is not enabled
            for the requested operation
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "441":
          description: ErrDurationTooShort indicates that the provided duration value
            does not meet the minimum required threshold
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "500":
          description: ErrServerInternalError indicates an internal server error with
            a corresponding error code of 500
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "503":
          description: ErrServiceMaintenance indicates that the service is temporarily
            unavailable due to maintenance, corresponding to HTTP status code 503
          schema:
            $ref: '#/definitions/mk20.DealCode'
      security:
      - CurioAuth: []
      summary: Make a mk20 deal
  /update/{id}:
    get:
      consumes:
      - application/json
      description: Useful for adding adding additional products and updating PoRep
        duration
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: mk20.Deal in json format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/mk20.Deal'
      responses:
        "200":
          description: Ok represents a successful operation with an HTTP status code
            of 200
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: ErrDealNotFound indicates that the specified deal could not
            be found, corresponding to the HTTP status code 404
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "422":
          description: ErrUnsupportedDataSource indicates the specified data source
            is not supported or disabled for use in the current context
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "423":
          description: ErrUnsupportedProduct indicates that the requested product
            is not supported by the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "424":
          description: ErrProductNotEnabled indicates that the requested product is
            not enabled on the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "425":
          description: ErrProductValidationFailed indicates a failure during product-specific
            validation due to invalid or missing data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "426":
          description: ErrDealRejectedByMarket indicates that a proposed deal was
            rejected by the market for not meeting its acceptance criteria or rules
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "429":
          description: ErrServiceOverloaded indicates that the service is overloaded
            and cannot process the request at the moment
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "430":
          description: ErrMalformedDataSource indicates that the provided data source
            is incorrectly formatted or contains invalid data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "440":
          description: ErrMarketNotEnabled indicates that the market is not enabled
            for the requested operation
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "441":
          description: ErrDurationTooShort indicates that the provided duration value
            does not meet the minimum required threshold
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "500":
          description: ErrServerInternalError indicates an internal server error with
            a corresponding error code of 500
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "503":
          description: ErrServiceMaintenance indicates that the service is temporarily
            unavailable due to maintenance, corresponding to HTTP status code 503
          schema:
            $ref: '#/definitions/mk20.DealCode'
      security:
      - CurioAuth: []
      summary: Update the deal details of existing deals.
  /upload/{id}:
    post:
      consumes:
      - application/json
      description: Finalizes the serial upload process once data has been uploaded
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: mk20.deal in json format
        in: body
        name: body
        schema:
          $ref: '#/definitions/mk20.Deal'
      responses:
        "200":
          description: Ok represents a successful operation with an HTTP status code
            of 200
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: ErrDealNotFound indicates that the specified deal could not
            be found, corresponding to the HTTP status code 404
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "422":
          description: ErrUnsupportedDataSource indicates the specified data source
            is not supported or disabled for use in the current context
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "423":
          description: ErrUnsupportedProduct indicates that the requested product
            is not supported by the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "424":
          description: ErrProductNotEnabled indicates that the requested product is
            not enabled on the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "425":
          description: ErrProductValidationFailed indicates a failure during product-specific
            validation due to invalid or missing data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "426":
          description: ErrDealRejectedByMarket indicates that a proposed deal was
            rejected by the market for not meeting its acceptance criteria or rules
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "429":
          description: ErrServiceOverloaded indicates that the service is overloaded
            and cannot process the request at the moment
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "430":
          description: ErrMalformedDataSource indicates that the provided data source
            is incorrectly formatted or contains invalid data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "440":
          description: ErrMarketNotEnabled indicates that the market is not enabled
            for the requested operation
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "441":
          description: ErrDurationTooShort indicates that the provided duration value
            does not meet the minimum required threshold
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "500":
          description: ErrServerInternalError indicates an internal server error with
            a corresponding error code of 500
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "503":
          description: ErrServiceMaintenance indicates that the service is temporarily
            unavailable due to maintenance, corresponding to HTTP status code 503
          schema:
            $ref: '#/definitions/mk20.DealCode'
      security:
      - CurioAuth: []
      summary: Finalizes the serial upload process
    put:
      description: Allows uploading data for deals in a single stream. Suitable for
        small deals.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: raw binary
        in: body
        name: body
        required: true
        schema:
          items:
            type: integer
          type: array
      responses:
        "200":
          description: UploadOk indicates a successful upload operation, represented
            by the HTTP status code 200
          schema:
            $ref: '#/definitions/mk20.UploadCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: UploadStartCodeDealNotFound represents a 404 status indicating
            the deal was not found during the upload start process
          schema:
            $ref: '#/definitions/mk20.UploadStartCode'
        "500":
          description: UploadServerError indicates a server-side error occurred during
            the upload process, represented by the HTTP status code 500
          schema:
            $ref: '#/definitions/mk20.UploadCode'
      security:
      - CurioAuth: []
      summary: Upload the deal data
  /uploads/{id}:
    get:
      description: Return a json struct detailing the current status of a deal upload.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: The status of a file upload process, including progress and
            missing chunks
          schema:
            $ref: '#/definitions/mk20.UploadStatus'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: UploadStatusCodeDealNotFound indicates that the requested deal
            was not found, corresponding to status code 404
          schema:
            $ref: '#/definitions/mk20.UploadStatusCode'
        "425":
          description: UploadStatusCodeUploadNotStarted indicates that the upload
            process has not started yet
          schema:
            $ref: '#/definitions/mk20.UploadStatusCode'
        "500":
          description: UploadStatusCodeServerError indicates an internal server error
            occurred during the upload process, corresponding to status code 500
          schema:
            $ref: '#/definitions/mk20.UploadStatusCode'
      security:
      - CurioAuth: []
      summary: Status of deal upload
    post:
      consumes:
      - application/json
      description: Initializes the upload for a deal. Each upload must be initialized
        before chunks can be uploaded for a deal.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Metadata for initiating an upload operation
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/mk20.StartUpload'
      responses:
        "200":
          description: UploadStartCodeOk indicates a successful upload start request
            with status code 200
          schema:
            $ref: '#/definitions/mk20.UploadStartCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: UploadStartCodeDealNotFound represents a 404 status indicating
            the deal was not found during the upload start process
          schema:
            $ref: '#/definitions/mk20.UploadStartCode'
        "409":
          description: UploadStartCodeAlreadyStarted indicates that the upload process
            has already been initiated and cannot be started again
          schema:
            $ref: '#/definitions/mk20.UploadStartCode'
        "500":
          description: UploadStartCodeServerError indicates an error occurred on the
            server while processing an upload start request
          schema:
            $ref: '#/definitions/mk20.UploadStartCode'
      security:
      - CurioAuth: []
      summary: Starts the upload process
  /uploads/{id}/{chunkNum}:
    put:
      description: Allows uploading chunks for a deal file. Method can be called in
        parallel to speed up uploads.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: chunkNum
        in: path
        name: chunkNum
        required: true
        type: string
      - description: raw binary
        in: body
        name: data
        required: true
        schema:
          items:
            type: integer
          type: array
      responses:
        "200":
          description: UploadOk indicates a successful upload operation, represented
            by the HTTP status code 200
          schema:
            $ref: '#/definitions/mk20.UploadCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: UploadNotFound represents an error where the requested upload
            chunk could not be found, typically corresponding to HTTP status 404
          schema:
            $ref: '#/definitions/mk20.UploadCode'
        "409":
          description: UploadChunkAlreadyUploaded indicates that the chunk has already
            been uploaded and cannot be re-uploaded
          schema:
            $ref: '#/definitions/mk20.UploadCode'
        "500":
          description: UploadServerError indicates a server-side error occurred during
            the upload process, represented by the HTTP status code 500
          schema:
            $ref: '#/definitions/mk20.UploadCode'
      security:
      - CurioAuth: []
      summary: Upload a file chunk
  /uploads/finalize/{id}:
    post:
      consumes:
      - application/json
      description: Finalizes the upload process once all the chunks are uploaded.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: mk20.deal in json format
        in: body
        name: body
        schema:
          $ref: '#/definitions/mk20.Deal'
      responses:
        "200":
          description: Ok represents a successful operation with an HTTP status code
            of 200
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "400":
          description: Bad Request - Invalid input or validation error
          schema:
            type: string
        "404":
          description: ErrDealNotFound indicates that the specified deal could not
            be found, corresponding to the HTTP status code 404
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "422":
          description: ErrUnsupportedDataSource indicates the specified data source
            is not supported or disabled for use in the current context
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "423":
          description: ErrUnsupportedProduct indicates that the requested product
            is not supported by the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "424":
          description: ErrProductNotEnabled indicates that the requested product is
            not enabled on the provider
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "425":
          description: ErrProductValidationFailed indicates a failure during product-specific
            validation due to invalid or missing data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "426":
          description: ErrDealRejectedByMarket indicates that a proposed deal was
            rejected by the market for not meeting its acceptance criteria or rules
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "429":
          description: ErrServiceOverloaded indicates that the service is overloaded
            and cannot process the request at the moment
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "430":
          description: ErrMalformedDataSource indicates that the provided data source
            is incorrectly formatted or contains invalid data
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "440":
          description: ErrMarketNotEnabled indicates that the market is not enabled
            for the requested operation
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "441":
          description: ErrDurationTooShort indicates that the provided duration value
            does not meet the minimum required threshold
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "500":
          description: ErrServerInternalError indicates an internal server error with
            a corresponding error code of 500
          schema:
            $ref: '#/definitions/mk20.DealCode'
        "503":
          description: ErrServiceMaintenance indicates that the service is temporarily
            unavailable due to maintenance, corresponding to HTTP status code 503
          schema:
            $ref: '#/definitions/mk20.DealCode'
      security:
      - CurioAuth: []
      summary: Finalizes the upload process
securityDefinitions:
  CurioAuth:
    description: |-
      Use the format: `CurioAuth PublicKeyType:PublicKey:Signature`

      - `PublicKeyType`: String representation of type of wallet (e.g., "ed25519", "bls", "secp256k1")
      - `PublicKey`: Base64 string of public key bytes
      - `Signature`: Signature is Base64 string of signature bytes.
      - The client is expected to sign the SHA-256 hash of a message constructed by concatenating the following components, in order.
      - The raw public key bytes (not a human-readable address)
      - The timestamp, truncated to the nearest hour, formatted in RFC3339 (e.g., 2025-07-15T17:00:00Z)
      - These two byte slices are joined without any delimiter between them, and the resulting byte array is then hashed using SHA-256. The signature is performed on that hash.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
