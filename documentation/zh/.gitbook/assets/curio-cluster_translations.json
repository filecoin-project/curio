{
    "language": "zh",
    "messages": [
        {"message": "&lt;div align=\"left\"&gt;Exists&lt;/div&gt;", "translation": "&lt;div align=\"left\"&gt;存在&lt;/div&gt;"},
        {"message": "&lt;div style=\"font-size: 10px;\"&gt;Multiple&lt;/div&gt;&lt;div style=\"font-size: 10px;\"&gt;Actors on one Cluster&lt;br style=\"font-size: 10px;\"&gt;&lt;/div&gt;", "translation": "&lt;div style=\"font-size: 10px;\"&gt;多个&lt;/div&gt;&lt;div style=\"font-size: 10px;\"&gt;群集上的演员&lt;br style=\"font-size: 10px;\"&gt;&lt;/div&gt;"},
        {"message": "&lt;div style=\"font-size: 9px;\"&gt;Each Curio node is primarily identified by it's host:port.&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;Nodes register themselves in the harmony_machines table on startup, and update their last_contact periodically so that other machines in the cluster can see that they are alive and that their tasks don't need to be re-claimed by another node&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;", "translation": "&lt;div style=\"font-size: 9px;\"&gt;每个 Curio 节点主要由其主机:端口标识。&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;节点在启动时注册到 harmony_machines 表，并定期更新其 last_contact，以便群集中的其他机器可以看到它们处于活动状态，并且它们的任务不需要被其他节点重新获取&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;"},
        {"message": "&lt;div style=\"font-size: 9px;\"&gt;Task execution is coordinated through the harmony_task table.&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;Tasks are initially added to this table by nodes which are interested in them getting executed. Nodes which add tasks are not guaranteed to be the ones executing them.&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;Tasks initially have null owned_by - when curio nodes see tasks with a null owned_by and are capable of handling tasks with the given name and have available resources will try to claim the task by setting this field to their machine_id. Postgres will only allow one node to successfully set themselves as the owner, and that node will start executing the task&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;", "translation": "&lt;div style=\"font-size: 9px;\"&gt;任务执行通过 harmony_task 表协调。&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;任务最初由对任务执行感兴趣的节点添加到该表中。添加任务的节点不一定是执行任务的节点。&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;&lt;div style=\"font-size: 9px;\"&gt;任务最初的 owned_by 为 null - 当 curio 节点看到 owned_by 为 null 且能够处理给定名称的任务并具有可用资源时，会尝试通过将该字段设置为其 machine_id 来声明任务。Postgres 只允许一个节点成功将自己设为所有者，并且该节点将开始执行任务&lt;br style=\"font-size: 9px;\"&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;..&lt;/div&gt;", "translation": "&lt;div&gt;..&lt;/div&gt;"},
        {"message": "&lt;div&gt;Alternative&lt;/div&gt;&lt;div&gt;Revenue&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;替代&lt;/div&gt;&lt;div&gt;收入&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Compute&lt;/div&gt;&lt;div&gt;Nodes&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;计算&lt;/div&gt;&lt;div&gt;节点&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Curio clusters are coordinated by one shared postgres database. By default it is recommended to use YugabyteDB.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The database contains a set of tables which are used to orchestract actions between cluster nodes.&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;Curio 群集由一个共享的 Postgres 数据库协调。默认推荐使用 YugabyteDB。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;数据库包含一组用于协调群集节点之间操作的表。&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Curio supports boost without modifications. Curio nodes can be configured to expose a subset of lotus-miner RPC. One node can expose multiple endpoints for multiple miner actors, making it easy to configure a cluster with multiple actors/boost nodes.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the future boost will be integrated as a component of curio, meaning that only a single binary needs to be managed, and making market operations scalable&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;Curio 支持无修改的 boost。Curio 节点可以配置为公开 lotus-miner RPC 的子集。一个节点可以为多个矿工参与者公开多个端点，这使得配置具有多个参与者/boost 节点的集群变得容易。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;未来，boost 将作为 curio 的组件进行集成，这意味着只需管理单一的二进制文件，使市场操作可扩展。&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Data&lt;/div&gt;&lt;div&gt;Ingest&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;数据&lt;/div&gt;&lt;div&gt;摄取&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Deal&lt;/div&gt;&lt;div&gt;Client&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;交易&lt;/div&gt;&lt;div&gt;客户&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Long&lt;/div&gt;&lt;div&gt;Term Storage&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;长期&lt;/div&gt;&lt;div&gt;存储&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Network&lt;/div&gt;&lt;div&gt;Nodes&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;网络&lt;/div&gt;&lt;div&gt;节点&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;PoRep&lt;/div&gt;&lt;div&gt;Pipeline&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;PoRep&lt;/div&gt;&lt;div&gt;管道&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;PoSt nodes schedule PoSt tasks collaboratively. First each node watches the chain and proposes taks to execute, then the Harmony task engine ensures that tasks are executed by at least one node in the cluster. This means that with just two nodes an SP with no overlapping partitions can get highly available window and winning PoSt.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This configuration also enables SPs to compute multiple partitions in parallel enabling very large actors as well as making it possible to share one set of PoSt nodes between multiple actors&lt;br&gt; &lt;/div&gt;", "translation": "&lt;div&gt;PoSt 节点协作调度 PoSt 任务。首先，每个节点观察链并提出执行的任务，然后 Harmony 任务引擎确保群集中的至少一个节点执行这些任务。这意味着仅使用两个节点的 SP 在没有重叠分区的情况下可以获得高度可用的窗口和获胜的 PoSt。&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;这种配置还使 SP 能够并行计算多个分区，使得非常大的演员以及在多个演员之间共享一组 PoSt 节点成为可能。&lt;br&gt; &lt;/div&gt;"},
        {"message": "&lt;div&gt;PoSt&lt;/div&gt;&lt;div&gt;Proving&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;PoSt&lt;/div&gt;&lt;div&gt;证明&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Providing&lt;/div&gt;&lt;div&gt;Retrieval&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;提供&lt;/div&gt;&lt;div&gt;检索&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Proving&lt;/div&gt;&lt;div&gt;Nodes&lt;/div&gt;", "translation": "&lt;div&gt;证明&lt;/div&gt;&lt;div&gt;节点&lt;/div&gt;"},
        {"message": "&lt;div&gt;Reliable&lt;/div&gt;&lt;div&gt;Proving&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;可靠的&lt;/div&gt;&lt;div&gt;证明&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Retrieval&lt;/div&gt;&lt;div&gt;Server&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;检索&lt;/div&gt;&lt;div&gt;服务器&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDR task&lt;/div&gt;&lt;div&gt;execution starts&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;SDR 任务&lt;/div&gt;&lt;div&gt;执行开始&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDR task&lt;/div&gt;&lt;div&gt;execution&lt;/div&gt;&lt;div&gt;finishes&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;SDR 任务&lt;/div&gt;&lt;div&gt;执行&lt;/div&gt;&lt;div&gt;完成&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDR task&lt;/div&gt;&lt;div&gt;is claimed&lt;/div&gt;", "translation": "&lt;div&gt;SDR 任务&lt;/div&gt;&lt;div&gt;已被认领&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDR task&lt;/div&gt;&lt;div&gt;is created&lt;/div&gt;", "translation": "&lt;div&gt;SDR 任务&lt;/div&gt;&lt;div&gt;已创建&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDRTrees task&lt;/div&gt;&lt;div&gt;execution starts&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;SDRTrees 任务&lt;/div&gt;&lt;div&gt;执行开始&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDRTrees task&lt;/div&gt;&lt;div&gt;execution&lt;/div&gt;&lt;div&gt;finishes&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;SDRTrees 任务&lt;/div&gt;&lt;div&gt;执行&lt;/div&gt;&lt;div&gt;完成&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDRTrees task&lt;/div&gt;&lt;div&gt;is claimed&lt;/div&gt;", "translation": "&lt;div&gt;SDRTrees 任务&lt;/div&gt;&lt;div&gt;已被认领&lt;/div&gt;"},
        {"message": "&lt;div&gt;SDRTrees task&lt;/div&gt;&lt;div&gt;is created&lt;/div&gt;", "translation": "&lt;div&gt;SDRTrees 任务&lt;/div&gt;&lt;div&gt;已创建&lt;/div&gt;"},
        {"message": "&lt;div&gt;SaaS /&lt;br&gt;&lt;/div&gt;&lt;div&gt;DePin?&lt;/div&gt;", "translation": "&lt;div&gt;SaaS /&lt;br&gt;&lt;/div&gt;&lt;div&gt;去中心化Pin?&lt;/div&gt;"},
        {"message": "&lt;div&gt;Scratch&lt;/div&gt;&lt;div&gt;Space&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;暂存&lt;/div&gt;&lt;div&gt;空间&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Snap&lt;/div&gt;&lt;div&gt;Pipeline&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;快照&lt;/div&gt;&lt;div&gt;管道&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Storage&lt;/div&gt;&lt;div&gt;Nodes&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;存储&lt;/div&gt;&lt;div&gt;节点&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Storage&lt;/div&gt;&lt;div&gt;nodes&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;存储&lt;/div&gt;&lt;div&gt;节点&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;Unseal&lt;/div&gt;&lt;div&gt;Pipeline&lt;br&gt;&lt;/div&gt;", "translation": "&lt;div&gt;解封&lt;/div&gt;&lt;div&gt;管道&lt;br&gt;&lt;/div&gt;"},
        {"message": "&lt;div&gt;after_sdr&lt;/div&gt;", "translation": "&lt;div&gt;after_sdr&lt;/div&gt;"},
        {"message": "&lt;font style=\"font-size: 10px;\"&gt;YugabyteDB, which is already used in boost, is used by Curio as an easy to manage highly available central place for all cluster state. It technically doesn't hold any critical data without which sectors wouldn't be provable, but all cluster operations are coordinated through it&lt;br&gt;&lt;/font&gt;", "translation": "&lt;font style=\"font-size: 10px;\"&gt;YugabyteDB 已在 boost 中使用，并被 Curio 用作易于管理的高可用集群状态的中央位置。技术上，它不持有任何没有它无法证明的关键数据，但所有集群操作都是通过它协调的。&lt;br&gt;&lt;/font&gt;"},
        {"message": "&lt;font style=\"font-size: 24px;\"&gt;Curio Cluster&lt;/font&gt;", "translation": "&lt;font style=\"font-size: 24px;\"&gt;Curio 集群&lt;/font&gt;"},
        {"message": "&lt;font style=\"font-size: 24px;\"&gt;Curio Nodes&lt;/font&gt;", "translation": "&lt;font style=\"font-size: 24px;\"&gt;Curio 节点&lt;/font&gt;"},
        {"message": "&lt;font style=\"font-size: 9px;\"&gt;Each Curio node can talk to a set of Chain nodes, so that in case one goes down or is slow, another one can be selected&lt;/font&gt;", "translation": "&lt;font style=\"font-size: 9px;\"&gt;每个 Curio 节点可以与一组链节点通信，这样如果一个节点宕机或运行缓慢，可以选择另一个节点。&lt;/font&gt;"},
        {"message": "...", "translation": "..."},
        {"message": "Boost", "translation": "Boost"},
        {"message": "Chain", "translation": "链"},
        {"message": "Chain communication happens with a set of nodes which should make it very robust", "translation": "链通信发生在一组节点之间，使其非常稳健"},
        {"message": "Compute workers execute tasks from pipelines. Tasks are created when pipelines are ready for them to be executed, then they get claimed by available nodes. All nodes help maintain pipelines relevant to them", "translation": "计算工人执行来自管道的任务。当管道准备好执行任务时，任务就会被创建，然后被可用的节点认领。所有节点都帮助维护与它们相关的管道"},
        {"message": "Creating new sectors", "translation": "创建新扇区"},
        {"message": "Curio", "translation": "Curio"},
        {"message": "Curio Task", "translation": "Curio 任务"},
        {"message": "Curio Task Execution", "translation": "Curio 任务执行"},
        {"message": "Example: Few steps in the sealing pipeline", "translation": "示例：封装管道中的几个步骤"},
        {"message": "GPU Node", "translation": "GPU 节点"},
        {"message": "Long-term storage is accessible for reading from any place in the cluster ", "translation": "长期存储可以从群集中的任何地方进行读取"},
        {"message": "Lotus Chain", "translation": "Lotus 链"},
        {"message": "Network nodes communicate with the internet (or offline data transfer devices) getting data in and out of the cluster. ", "translation": "网络节点与互联网（或离线数据传输设备）通信，以在群集之间传输数据。"},
        {"message": "Onboarding new data", "translation": "引入新数据"},
        {"message": "Piece storage", "translation": "分片存储"},
        {"message": "Planned", "translation": "计划的"},
        {"message": "PoSt nodes", "translation": "PoSt 节点"},
        {"message": "Proving workers make sure that proving tasks get executed correctly and on time", "translation": "证明工人确保证明任务被正确且及时执行"},
        {"message": "Reading archives", "translation": "读取存档"},
        {"message": "Redundant chain nodes", "translation": "冗余链节点"},
        {"message": "Research", "translation": "研究"},
        {"message": "SDR Node", "translation": "SDR 节点"},
        {"message": "SDRTrees task is executed by the GPU node. Execution steps are almost identical to the SDR (or any other) task", "translation": "SDRTrees 任务由 GPU 节点执行。执行步骤几乎与 SDR（或其他任何）任务相同"},
        {"message": "Sealing nodes", "translation": "封装节点"},
        {"message": "Sealing nodes make independent scheduling decisions. Each node looks for available work in the database, and collaboratively decides what to do next.&lt;br&gt;Sectors in the process of being sealed simply list which algorithms need to be executed on them, which means that work isn't bound by a sequential pipeline.For example data can start mowing to long-term storage while the commit message is landing on-chain", "translation": "封装节点做出独立的调度决策。每个节点在数据库中查找可用的工作，并共同决定下一步的操作。&lt;br&gt;封装过程中的扇区仅列出需要在其上执行的算法，这意味着工作不受顺序管道的限制。例如，在提交消息上链时，数据可以开始移动到长期存储中"},
        {"message": "Sector 1 is Created", "translation": "扇区 1 已创建"},
        {"message": "Some process (e.g boost proxy handling a deal) creates an entry in the sectors_sdr_pipeline. That entry only contains a sector number and miner actor id plus a set of pieces assigned to the sector", "translation": "某些过程（例如 boost 代理处理交易）在 sectors_sdr_pipeline 中创建条目。该条目仅包含扇区编号和矿工参与者 ID，以及分配给该扇区的一组分片"},
        {"message": "Soon", "translation": "很快"},
        {"message": "Storage nodes are like any other node in the curio cluster - just a curio node, but with only the light storage related tasks enabled.", "translation": "存储节点就像 Curio 集群中的任何其他节点一样 - 只是一个 Curio 节点，但只启用了轻量级的存储相关任务。"},
        {"message": "The GPU node sees that there is a sector entry in the pipeline table which is ready for Trees tasks to be started - this is indicated by after_sdr flag being true and after_tree_.. being false", "translation": "GPU 节点看到管道表中有一个扇区条目准备好开始树任务 - 这由 after_sdr 标志为 true 和 after_tree_.. 为 false 指示"},
        {"message": "The SDR node (which may be a different node) sees that there is a SDR task in the harmony_task table with null owner_id, so it tries to set itself as the owner. If that is successful this node will now start executing the task", "translation": "SDR 节点（可能是不同的节点）看到 harmony_task 表中有一个 SDR 任务，且 owner_id 为 null，因此它尝试将自己设为所有者。如果成功，该节点现在将开始执行任务"},
        {"message": "The SDR node has a sha-capable CPU and a bunch of memory. It will claim SDR tasks.", "translation": "SDR 节点具有支持 sha 的 CPU 和大量内存。它将认领 SDR 任务。"},
        {"message": "The SDR node sees that there is a sector entry in the pipeline table which is ready for SDR to be started. In a transaction it will create a task in the harmony_task table and assign the task_id of the task to the task_id_sdr field of the sector in the pipeline table", "translation": "SDR 节点看到管道表中有一个扇区条目准备好启动 SDR。在事务中，它将在 harmony_task 表中创建一个任务，并将任务的 task_id 分配给管道表中扇区的 task_id_sdr 字段"},
        {"message": "The example GPU node has a GPU and is configured to execute the SDRTrees tasks", "translation": "示例 GPU 节点具有 GPU，并配置为执行 SDRTrees 任务"},
        {"message": "The node which has just set itself as the owner now starts executing the task. It looks for sector which sector it is operating on by checking what rows in sectors_sdr_pipeline have task_id_sdr set to the task_id which it is currently executing", "translation": "刚刚将自己设置为所有者的节点现在开始执行任务。它通过检查 sectors_sdr_pipeline 中哪些行的 task_id_sdr 设置为它当前正在执行的 task_id 来查找它正在操作的扇区"},
        {"message": "We start with an example cluster with two machines. Those machines will register themselves in the harmony_machine table on startup", "translation": "我们从一个包含两台机器的示例集群开始。这些机器将在启动时在 harmony_machine 表中注册自己"},
        {"message": "When task execution finishes, the task code will set after_sdr in sectors_sdr_pipeline to true, which will indicate to the next stage that the previous stage has finished", "translation": "当任务执行完成时，任务代码会将 sectors_sdr_pipeline 中的 after_sdr 设置为 true，这将指示下一个阶段前一个阶段已完成"},
        {"message": "Yugabyte", "translation": "Yugabyte"},
        {"message": "YugabyteDB&lt;br&gt;&lt;div&gt;(Postgres+HA)&lt;/div&gt;&lt;div&gt;Orchestrating&lt;/div&gt;&lt;div&gt;the cluster&lt;br&gt;&lt;/div&gt;", "translation": "YugabyteDB&lt;br&gt;&lt;div&gt;(Postgres+HA)&lt;/div&gt;&lt;div&gt;协调&lt;/div&gt;&lt;div&gt;集群&lt;br&gt;&lt;/div&gt;"},
        {"message": "after_tree_r", "translation": "after_tree_r"},
        {"message": "harmory_machines", "translation": "harmory_machines"},
        {"message": "harmory_task", "translation": "harmory_task"},
        {"message": "host_and_port", "translation": "host_and_port"},
        {"message": "last_contact", "translation": "last_contact"},
        {"message": "machine_id", "translation": "machine_id"},
        {"message": "name", "translation": "名称"},
        {"message": "owned_by", "translation": "owned_by"},
        {"message": "sdr_pipeline is one of the ways in which tasks are coordinated. Each sealing node is responsible for its part of the pipeline - for example nodes which are executing TreeR will look for sectors that are after_sdr, but not after_tree_r and have null tree_r task ID - when they find a sector like that those nodes will start a transaction which creates a task for e.g. computing trees and will assign the task ID to the task_id_tree_r in case of the Trees task", "translation": "sdr_pipeline 是任务协调的一种方式。每个封装节点负责其管道部分 - 例如执行 TreeR 的节点将寻找那些 after_sdr 为 true、但 after_tree_r 为 false 且 tree_r 任务 ID 为 null 的扇区 - 当它们找到这样的扇区时，这些节点将开始一个事务，为例如计算树创建一个任务，并将任务 ID 分配给树任务的 task_id_tree_r"},
        {"message": "sector_id", "translation": "扇区 ID"},
        {"message": "sectors_sdr_pipeline", "translation": "sectors_sdr_pipeline"},
        {"message": "task_id", "translation": "任务 ID"},
        {"message": "task_id_sdr", "translation": "task_id_sdr"},
        {"message": "task_id_tree_r", "translation": "task_id_tree_r"}
    ]
}
